<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
  <title>Eric Chiang</title>
    <link>https://ericchiang.github.io/</link>
    <description>Recent content in posts on Eric Chiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://ericchiang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Protobuf generators for fun and profit</title>
      <link>https://ericchiang.github.io/post/protoc-plugins/</link>
      <pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/protoc-plugins/</guid>
      <description>&lt;p&gt;There aren&amp;rsquo;t a ton of great options for API definition languages. OpenAPI and gRPC are the only real game in town, but each have their own shortcomings. OpenAPI is a huge, awkward language for expressing types. gRPC is focused on its own protocol rather than interoping with more general semantics like REST.&lt;/p&gt;&#xA;&lt;p&gt;Since I vastly prefer the Protocol Buffer language over YAML, I was recently looking into &lt;a href=&#34;https://cloud.google.com/blog/products/api-management/bridge-the-gap-between-grpc-and-rest-http-apis&#34;&gt;REST bindings&lt;/a&gt; for gRPC, but the inconsistency of the ecosystem stands out. Individual projects run the gambit between totally battle tested and basically unmaintained.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Confidential Compute and GPUs</title>
      <link>https://ericchiang.github.io/post/confidential-gpus/</link>
      <pubDate>Mon, 27 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/confidential-gpus/</guid>
      <description>&lt;p&gt;Recently, I’ve had a few conversations about &lt;a href=&#34;https://developer.nvidia.com/blog/confidential-computing-on-h100-gpus-for-secure-and-trustworthy-ai/&#34;&gt;NVIDIA Confidential Compute&lt;/a&gt;, usually in the context of startups trying to sell security products to AI companies.&lt;/p&gt;&#xA;&lt;p&gt;The pitch generally looks like this: Companies are protective of their weights and their data. We should be able to train and/or run models on GPUs securely using attestation primitives. In the same way that we might store a private key in an HSM, surely we can design a similar construct for AI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The road to zero trust is paved with good intentions</title>
      <link>https://ericchiang.github.io/post/zero-trust/</link>
      <pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/zero-trust/</guid>
      <description>&lt;p&gt;&lt;em&gt;This blog post is a written version of a talk that Eric and &lt;a href=&#34;https://mayakaczorowski.com/about&#34;&gt;Maya&lt;/a&gt; gave at NorthSec in 2022. You can also &lt;a href=&#34;https://youtu.be/UWpTFiRf4Uw?si=cYwvAQabGg7Q5Ota&#34;&gt;watch the recording&lt;/a&gt; and &lt;a href=&#34;https://github.com/mayakacz/presentation-slides/blob/master/20220519%20-%20NorthSec%202022%20-%20The%20road%20to%20BeyondCorp%20is%20paved%20with%20good%20intentions.pdf&#34;&gt;get the slides&lt;/a&gt;. This blog post is also cross-posted to &lt;a href=&#34;https://mayakaczorowski.com/blogs&#34;&gt;Maya&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We put together the material for this post in 2022 during the peak of the zero trust hype cycle when RSA show floor booths, marketing materials, analyst reports, and even a US executive branch &lt;a href=&#34;https://www.whitehouse.gov/wp-content/uploads/2022/01/M-22-09.pdf&#34;&gt;memorandum&lt;/a&gt; couldn&amp;rsquo;t stop talking about zero trust. Though the cycle&amp;rsquo;s moved on — to &amp;ldquo;AI-powered security&amp;rdquo;— it doesn&amp;rsquo;t feel like zero trust has necessarily progressed. Have we successfully adopted zero trust, and baked these principles into our industry? Or have we thrown a few identity aware proxies on the problem and called it a day?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing shared libraries in Rust</title>
      <link>https://ericchiang.github.io/post/rust-libs/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/rust-libs/</guid>
      <description>&lt;p&gt;Every tool that gets big enough eventually provides a way to support third-party logic. Maybe you expose APIs for clients to call. Maybe you take some code and run it in a sandbox. Maybe you embed a Lua interpreter.&lt;/p&gt;&#xA;&lt;p&gt;For many programs, extensibility means dynamic shared libraries. Good old, &amp;ldquo;here&amp;rsquo;s a .so file for you to dlopen().&amp;rdquo; &lt;a href=&#34;https://docs.oasis-open.org/pkcs11/pkcs11-base/v2.40/os/pkcs11-base-v2.40-os.html&#34;&gt;PKCS #11&lt;/a&gt;, &lt;a href=&#34;https://www.sudo.ws/about/plugins/&#34;&gt;Sudo Plugins&lt;/a&gt;, &lt;a href=&#34;https://docs.python.org/3/extending/extending.html&#34;&gt;Python&lt;/a&gt; and &lt;a href=&#34;https://nodejs.org/api/addons.html&#34;&gt;NodeJS&lt;/a&gt; addons, &lt;a href=&#34;https://www.sqlite.org/loadext.html&#34;&gt;SQLite&lt;/a&gt; and &lt;a href=&#34;https://www.postgresql.org/download/products/6-postgresql-extensions/&#34;&gt;Postgres&lt;/a&gt; extensions, &lt;a href=&#34;https://www.nginx.com/resources/wiki/modules/&#34;&gt;Nginx&lt;/a&gt; and &lt;a href=&#34;https://httpd.apache.org/modules/&#34;&gt;httpd&lt;/a&gt; modules, even &lt;a href=&#34;https://blog.jessfraz.com/post/ld_preload/&#34;&gt;LD_PRELOAD&lt;/a&gt; hacks.&lt;/p&gt;&#xA;&lt;p&gt;As much fun as C is, a few &lt;a href=&#34;https://github.com/google/native-pkcs11&#34;&gt;recent&lt;/a&gt; &lt;a href=&#34;https://github.com/square/sudo_pair&#34;&gt;projects&lt;/a&gt; that take advantage of Rust&amp;rsquo;s FFI support have caught my eye. This post covers a proof-of-concept Linux-PAM module for &lt;a href=&#34;https://en.wikipedia.org/wiki/Google_Authenticator&#34;&gt;&lt;em&gt;Google Authenticator&lt;/em&gt;&lt;/a&gt;*, going through the steps to build a shared library with Rust.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Calling C from Go</title>
      <link>https://ericchiang.github.io/post/cgo/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/cgo/</guid>
      <description>&lt;p&gt;What&amp;rsquo;s a little shared memory between friends?&lt;/p&gt;&#xA;&lt;p&gt;As someone who works a lot with operating systems, there are many scenarios that require loading C libraries. Plugins that use &lt;a href=&#34;https://github.com/google/go-pkcs11&#34;&gt;shared libraries&lt;/a&gt;, low-level &lt;a href=&#34;https://github.com/go-piv/piv-go&#34;&gt;device APIs&lt;/a&gt;, random &lt;a href=&#34;https://github.com/google/go-tspi&#34;&gt;Linux utilities&lt;/a&gt;. Despite modern options for interprocess communication, sometimes you get a header file and a shared object and have to run with it.&lt;/p&gt;&#xA;&lt;p&gt;This post covers &lt;a href=&#34;https://pkg.go.dev/cmd/cgo&#34;&gt;cgo&lt;/a&gt;, Go&amp;rsquo;s C interoperability layer.&lt;/p&gt;&#xA;&lt;h2 id=&#34;referencing-c&#34;&gt;Referencing C&lt;/h2&gt;&#xA;&lt;p&gt;Go programs reference C symbols through the magic &amp;ldquo;C&amp;rdquo; package. This is a pseudo-package that exposes C symbols to Go, as well as a number of utilities we&amp;rsquo;ll cover later.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Analyzing Spotify stream history</title>
      <link>https://ericchiang.github.io/post/spotify/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/spotify/</guid>
      <description>&lt;p&gt;Apologies in advanced for the music tastes.&lt;/p&gt;&#xA;&lt;p&gt;I recently learned Spotify provides downloads for users&amp;rsquo; streaming history. For me, this is over 10 years worth of data, so at the very least it seemed like a good nostalgia trip. This post covers some of my analysis of my personal export, and hopefully is a good starting place if you&amp;rsquo;re interested in exploring your own.&lt;/p&gt;&#xA;&lt;p&gt;To request your data, visit your Spotify account&amp;rsquo;s privacy page and select &amp;ldquo;Extended streaming history.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Rust borrow checker</title>
      <link>https://ericchiang.github.io/post/rust-borrow/</link>
      <pubDate>Tue, 07 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/rust-borrow/</guid>
      <description>&lt;p&gt;I’ve been having fun with Rust lately.&lt;/p&gt;&#xA;&lt;p&gt;Rust is notoriously difficult, but at some point it clicks and starts to look like any language: structs and methods. Except you don’t have to worry about a bad &lt;code&gt;free()&lt;/code&gt; causing a vulnerability, or basic string operation segfaulting.&lt;/p&gt;&#xA;&lt;p&gt;Success with Rust’s &lt;a href=&#34;https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html&#34;&gt;memory model&lt;/a&gt; depends on understanding a few core concepts, and this post will go over references (and when to avoid them).&lt;/p&gt;&#xA;&lt;p&gt;My first mistake was to think of references (&lt;code&gt;&amp;amp;T&lt;/code&gt;) as pointers. While they’re related, there’s many cases where you’d use a pointer in other languages but shouldn’t use a reference. Rust even has a non-reference type (&lt;a href=&#34;https://doc.rust-lang.org/std/boxed/struct.Box.html&#34;&gt;Box&lt;/a&gt;) that represents a pointer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Trusted Platform Module key hierarchy</title>
      <link>https://ericchiang.github.io/post/tpm-keys/</link>
      <pubDate>Mon, 04 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/tpm-keys/</guid>
      <description>&lt;p&gt;The Trusted Platform Module is a security device that sits on a physical motherboard, runs in a CPU trust zone, or is provided by a hypervisor. By functioning below the OS and boot sequence, it provides a trust anchor to verify those systems even if they’ve been compromised. TPMs are required for any device qualified for Windows, underpinning technologies like Windows’ BitLocker, various features in &lt;a href=&#34;https://www.chromium.org/developers/design-documents/tpm-usage&#34;&gt;ChromeOS&lt;/a&gt;, and Linux’s Integrity Measurement Architecture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keep it simple, stupid</title>
      <link>https://ericchiang.github.io/post/kiss/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/kiss/</guid>
      <description>&lt;p&gt;Growing up in the Bay Area, I used to go to the Zeum in San Francisco with my parents. Since rebranded as the Children’s Creativity Museum, it’s a space in Yerba Buena Gardens that hosts exhibits catering to kids. By far, my favorite activity was the claymation where I’d get to design characters and shoot short scenes. I figured out how to make a model jump using wires and add a muzzle flash with one frame of red clay.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Privileged containers aren&#39;t containers</title>
      <link>https://ericchiang.github.io/post/privileged-containers/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/privileged-containers/</guid>
      <description>&lt;h2 id=&#34;disabling-security-features&#34;&gt;Disabling security features&lt;/h2&gt;&#xA;&lt;p&gt;Applications that interact with host systems such as network plugins or storage drivers can have issues when run in a container, requesting access that’s been restricted by the kernel. For these cases, container runtimes have an out to disable these security features and let the process access the host. In Kubernetes this is achieved with the “privileged” security context field:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;containers:&#xA;  - name: flannel&#xA;    image: quay.io/coreos/flannel:v0.11.0-amd64&#xA;    command:&#xA;    - &amp;#34;/opt/bin/flanneld&amp;#34;&#xA;    - &amp;#34;--ip-masq&amp;#34;&#xA;    - &amp;#34;--kube-subnet-mgr&amp;#34;&#xA;    - &amp;#34;--iface=$(POD_IP)&amp;#34;&#xA;    env:&#xA;      - name: POD_IP&#xA;        valueFrom:&#xA;          fieldRef:&#xA;            fieldPath: status.podIP&#xA;    securityContext:&#xA;      privileged: true&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“privileged” doesn’t correspond to a single Linux primitive. Originally, this was just whatever Docker’s “&amp;ndash;privileged” flag implemented. While the container still runs in its own &lt;a href=&#34;../containers-from-scratch&#34;&gt;Linux namespaces and root filesystems&lt;/a&gt;, many security restrictions are relaxed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>User namespaces</title>
      <link>https://ericchiang.github.io/post/user-namespaces/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/user-namespaces/</guid>
      <description>&lt;p&gt;Ian Coldwater recently had a great thread on &lt;a href=&#34;https://twitter.com/IanColdwater/status/1097036373465407489&#34;&gt;bridging the gap between the security and container worlds&lt;/a&gt;. A lot of those answers wont fit in a tweet, so here’s my attempt for a more in-depth response.&lt;/p&gt;&#xA;&lt;h2 id=&#34;namespaces-for-everyone&#34;&gt;Namespaces for everyone&lt;/h2&gt;&#xA;&lt;p&gt;User namespaces are a way to create unique views of user and group IDs. Unlike &lt;a href=&#34;../containers-from-scratch/&#34;&gt;other namespaces&lt;/a&gt;, they can be created by non-root users and are primarily used by unprivileged processes to access capabilities normally reserved for root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Containers from scratch</title>
      <link>https://ericchiang.github.io/post/containers-from-scratch/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/containers-from-scratch/</guid>
      <description>&lt;p&gt;This is write up for talk I gave at &lt;a href=&#34;http://catbarcamp.org/&#34;&gt;CAT BarCamp&lt;/a&gt;, an awesome unconference at Portland State University. The talk started with the self-imposed challenge &lt;em&gt;&amp;ldquo;give an intro to containers without Docker or rkt.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Often thought of as cheap VMs, containers are just isolated groups of processes running on a single host. That isolation leverages several underlying technologies built into the Linux kernel: namespaces, cgroups, chroots and lots of terms you&amp;rsquo;ve probably heard before.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Let&#39;s Encrypt client for Go</title>
      <link>https://ericchiang.github.io/post/go-letsencrypt/</link>
      <pubDate>Fri, 13 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/go-letsencrypt/</guid>
      <description>&lt;p&gt;&lt;small&gt;Just want to jump into the GitHub project? &lt;a href=&#34;https://github.com/ericchiang/letsencrypt&#34;&gt;Click here&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you haven&amp;rsquo;t heard, &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; is trying to secure the internet with automated and free TLS certificates.&lt;/p&gt;&#xA;&lt;p&gt;In preperation for the Public Beta in December, I&amp;rsquo;ve written a simple client in Go which you can go get on &lt;a href=&#34;https://github.com/ericchiang/letsencrypt&#34;&gt;GitHub&lt;/a&gt;. This post uses that client to take you through the workflow of signing up, completing challenges, and requesting certificates. Let&amp;rsquo;s Encrypt!&lt;/p&gt;&#xA;&lt;p&gt;For these examples, I&amp;rsquo;ve spun up a &lt;a href=&#34;https://github.com/letsencrypt/boulder&#34;&gt;Let&amp;rsquo;s Encrypt server&lt;/a&gt; in dev mode on my local machine, made some edits to the server&amp;rsquo;s configuration, and added an entry to my &lt;code&gt;/etc/hosts&lt;/code&gt;. See details &lt;a href=&#34;https://github.com/ericchiang/letsencrypt#running-the-tests&#34;&gt;here&lt;/a&gt; if you want to follow along.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testing databases with Docker</title>
      <link>https://ericchiang.github.io/post/testing-dbs-with-docker/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/testing-dbs-with-docker/</guid>
      <description>&lt;p&gt;Databases, authentication management, metric aggregators; there&amp;rsquo;s a service or API for everything.&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s also a place called dependency hell.&lt;/p&gt;&#xA;&lt;p&gt;Dependency hell. Where it&amp;rsquo;s impossible to run a test on your laptop. Where bugs are found by running a main, clicking around, and seeing what breaks. Where you cross your fingers and pray that new versions don&amp;rsquo;t break everything. Where we use mocks and stubs to combat a growing technology stack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TLS with Go</title>
      <link>https://ericchiang.github.io/post/go-tls/</link>
      <pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/post/go-tls/</guid>
      <description>&lt;p&gt;NOTE: For an updated version of this post, see the GopherCon 2019 talk &lt;em&gt;&amp;ldquo;PKI for Gopher&amp;rdquo;&lt;/em&gt;. (&lt;a href=&#34;https://www.youtube.com/watch?v=VwPQKS9Njv0&#34;&gt;Video&lt;/a&gt;, &lt;a href=&#34;https://docs.google.com/presentation/d/16y-HTvL7ASzf9JspCBX0OVmhwUWVoLj9epzJfNMQRr8/edit&#34;&gt;Slides&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;p&gt;For a long time my knowledge of TLS was Googling &amp;ldquo;how to configure nginx as an HTTPS proxy.&amp;rdquo; Okay, the cert goes here and the key goes here, that&amp;rsquo;s my job done. But with more and more pushes for things HTTPS and HTTP/2 (which defaults to using TLS), it sometimes helps to understand this a little better.&lt;/p&gt;</description>
    </item>
    <item>
      <title>about</title>
      <link>https://ericchiang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/about/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../imgs/me.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Co-Founder and CTO at &lt;a href=&#34;https://oblique.security/&#34;&gt;Oblique&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;email: &lt;a href=&#34;mailto:eric.chiang.m@gmail.com&#34;&gt;eric.chiang.m@gmail.com&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;github: &lt;a href=&#34;https://github.com/ericchiang&#34;&gt;@ericchiang&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;bluesky: &lt;a href=&#34;https://bsky.app/profile/ericchiang.bsky.social&#34;&gt;@ericchiang.bsky.social&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;linkedin: &lt;a href=&#34;https://www.linkedin.com/in/eric-chiang-1047831bb/&#34;&gt;profile&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Work&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;Oblique&lt;/em&gt; - March 20225 - present&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Google&lt;/em&gt; - July 2018 - March 2025&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;CoreOS (acquired by Red Hat)&lt;/em&gt; - November 2015 - June 2018&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Yhat (&lt;a href=&#34;https://www.ycombinator.com/companies/yhat&#34;&gt;YC W15&lt;/a&gt;)&lt;/em&gt; - March 2014 - November 2015&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;IBM (intern)&lt;/em&gt; - June 2013 – September 2013&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Genentech (intern)&lt;/em&gt; - March 2013 – June 2013&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;Cloudera (intern)&lt;/em&gt; - May 2012 – August 2012&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Talks&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/yX8hyMmoVMo?si=1IjaWURYu0nkL6xV&#34;&gt;&lt;em&gt;Insecurity Protocols: An Overview of Modern Authentication&lt;/em&gt;&lt;/a&gt; (&lt;a href=&#34;https://docs.google.com/presentation/d/1UfVjUhZiCIXX_3uxikG8W342jBo6JWrqnILSiUvHXvU/edit?usp=sharing&#34;&gt;slides&lt;/a&gt;) - BSides SF - 2024&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/fINZQs61s0g?si=3K4dU7GFoC_Xckz4&#34;&gt;&lt;em&gt;Creating a Culture of Security (panel)&lt;/em&gt;&lt;/a&gt; - DASH by DataDog - 2023&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/c3B-ig_1nbk?si=77LeE81IyZXaEkc0&#34;&gt;&lt;em&gt;Scalable security: how to win friends and not burn out everyone&lt;/em&gt;&lt;/a&gt; - BSides SF - 2023&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/UWpTFiRf4Uw?si=z5rqAfTpNdSX4zno&#34;&gt;&lt;em&gt;The road to BeyondCorp is paved with good intentions&lt;/em&gt;&lt;/a&gt; - NorthSec - 2022&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/Qqp_pb8qKFY?si=PMktAyzmgVS6qV6F&#34;&gt;&lt;em&gt;Binary Policy with IMA and AppArmor&lt;/em&gt;&lt;/a&gt; - Linux Security Summit - 2019&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/VwPQKS9Njv0?si=gvMHJCdvyzXRFRHC&#34;&gt;&lt;em&gt;PKI for Gophers&lt;/em&gt;&lt;/a&gt; - GopherCon - 2019&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/wyqoi52k5jM?si=PKOuA7cS8-f6wMG6&#34;&gt;&lt;em&gt;Containers from Scratch&lt;/em&gt;&lt;/a&gt; - CoreOS Fest - 2017&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/WvnXemaYQ50?si=Xg6UL6A1H4iu1IWa&#34;&gt;&lt;em&gt;Kubernetes Auth and Access Control&lt;/em&gt;&lt;/a&gt; - KubeCon Seattle - 2016&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/i75ysFcvCkk?si=wfCOXc5Cih27q1tc&#34;&gt;&lt;em&gt;Kubernetes Access Control with Dex&lt;/em&gt;&lt;/a&gt; - CoreOS Fest - 2016&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://youtu.be/8hHOxfXcWsg?si=4rBVdaDtur5Wze9k&#34;&gt;&lt;em&gt;Why is Python so fast?&lt;/em&gt;&lt;/a&gt; - PyGotham - 2014&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Select open source&lt;/p&gt;</description>
    </item>
    <item>
      <title>license</title>
      <link>https://ericchiang.github.io/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ericchiang.github.io/license/</guid>
      <description>&lt;p&gt;All code snippets on this site (ericchiang.github.io) are provided under the following license:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Creative Commons Legal Code&#xA;&#xA;CC0 1.0 Universal&#xA;&#xA;    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE&#xA;    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN&#xA;    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS&#xA;    INFORMATION ON AN &amp;#34;AS-IS&amp;#34; BASIS. CREATIVE COMMONS MAKES NO WARRANTIES&#xA;    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS&#xA;    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM&#xA;    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED&#xA;    HEREUNDER.&#xA;&#xA;Statement of Purpose&#xA;&#xA;The laws of most jurisdictions throughout the world automatically confer&#xA;exclusive Copyright and Related Rights (defined below) upon the creator&#xA;and subsequent owner(s) (each and all, an &amp;#34;owner&amp;#34;) of an original work of&#xA;authorship and/or a database (each, a &amp;#34;Work&amp;#34;).&#xA;&#xA;Certain owners wish to permanently relinquish those rights to a Work for&#xA;the purpose of contributing to a commons of creative, cultural and&#xA;scientific works (&amp;#34;Commons&amp;#34;) that the public can reliably and without fear&#xA;of later claims of infringement build upon, modify, incorporate in other&#xA;works, reuse and redistribute as freely as possible in any form whatsoever&#xA;and for any purposes, including without limitation commercial purposes.&#xA;These owners may contribute to the Commons to promote the ideal of a free&#xA;culture and the further production of creative, cultural and scientific&#xA;works, or to gain reputation or greater distribution for their Work in&#xA;part through the use and efforts of others.&#xA;&#xA;For these and/or other purposes and motivations, and without any&#xA;expectation of additional consideration or compensation, the person&#xA;associating CC0 with a Work (the &amp;#34;Affirmer&amp;#34;), to the extent that he or she&#xA;is an owner of Copyright and Related Rights in the Work, voluntarily&#xA;elects to apply CC0 to the Work and publicly distribute the Work under its&#xA;terms, with knowledge of his or her Copyright and Related Rights in the&#xA;Work and the meaning and intended legal effect of CC0 on those rights.&#xA;&#xA;1. Copyright and Related Rights. A Work made available under CC0 may be&#xA;protected by copyright and related or neighboring rights (&amp;#34;Copyright and&#xA;Related Rights&amp;#34;). Copyright and Related Rights include, but are not&#xA;limited to, the following:&#xA;&#xA;  i. the right to reproduce, adapt, distribute, perform, display,&#xA;     communicate, and translate a Work;&#xA; ii. moral rights retained by the original author(s) and/or performer(s);&#xA;iii. publicity and privacy rights pertaining to a person&amp;#39;s image or&#xA;     likeness depicted in a Work;&#xA; iv. rights protecting against unfair competition in regards to a Work,&#xA;     subject to the limitations in paragraph 4(a), below;&#xA;  v. rights protecting the extraction, dissemination, use and reuse of data&#xA;     in a Work;&#xA; vi. database rights (such as those arising under Directive 96/9/EC of the&#xA;     European Parliament and of the Council of 11 March 1996 on the legal&#xA;     protection of databases, and under any national implementation&#xA;     thereof, including any amended or successor version of such&#xA;     directive); and&#xA;vii. other similar, equivalent or corresponding rights throughout the&#xA;     world based on applicable law or treaty, and any national&#xA;     implementations thereof.&#xA;&#xA;2. Waiver. To the greatest extent permitted by, but not in contravention&#xA;of, applicable law, Affirmer hereby overtly, fully, permanently,&#xA;irrevocably and unconditionally waives, abandons, and surrenders all of&#xA;Affirmer&amp;#39;s Copyright and Related Rights and associated claims and causes&#xA;of action, whether now known or unknown (including existing as well as&#xA;future claims and causes of action), in the Work (i) in all territories&#xA;worldwide, (ii) for the maximum duration provided by applicable law or&#xA;treaty (including future time extensions), (iii) in any current or future&#xA;medium and for any number of copies, and (iv) for any purpose whatsoever,&#xA;including without limitation commercial, advertising or promotional&#xA;purposes (the &amp;#34;Waiver&amp;#34;). Affirmer makes the Waiver for the benefit of each&#xA;member of the public at large and to the detriment of Affirmer&amp;#39;s heirs and&#xA;successors, fully intending that such Waiver shall not be subject to&#xA;revocation, rescission, cancellation, termination, or any other legal or&#xA;equitable action to disrupt the quiet enjoyment of the Work by the public&#xA;as contemplated by Affirmer&amp;#39;s express Statement of Purpose.&#xA;&#xA;3. Public License Fallback. Should any part of the Waiver for any reason&#xA;be judged legally invalid or ineffective under applicable law, then the&#xA;Waiver shall be preserved to the maximum extent permitted taking into&#xA;account Affirmer&amp;#39;s express Statement of Purpose. In addition, to the&#xA;extent the Waiver is so judged Affirmer hereby grants to each affected&#xA;person a royalty-free, non transferable, non sublicensable, non exclusive,&#xA;irrevocable and unconditional license to exercise Affirmer&amp;#39;s Copyright and&#xA;Related Rights in the Work (i) in all territories worldwide, (ii) for the&#xA;maximum duration provided by applicable law or treaty (including future&#xA;time extensions), (iii) in any current or future medium and for any number&#xA;of copies, and (iv) for any purpose whatsoever, including without&#xA;limitation commercial, advertising or promotional purposes (the&#xA;&amp;#34;License&amp;#34;). The License shall be deemed effective as of the date CC0 was&#xA;applied by Affirmer to the Work. Should any part of the License for any&#xA;reason be judged legally invalid or ineffective under applicable law, such&#xA;partial invalidity or ineffectiveness shall not invalidate the remainder&#xA;of the License, and in such case Affirmer hereby affirms that he or she&#xA;will not (i) exercise any of his or her remaining Copyright and Related&#xA;Rights in the Work or (ii) assert any associated claims and causes of&#xA;action with respect to the Work, in either case contrary to Affirmer&amp;#39;s&#xA;express Statement of Purpose.&#xA;&#xA;4. Limitations and Disclaimers.&#xA;&#xA; a. No trademark or patent rights held by Affirmer are waived, abandoned,&#xA;    surrendered, licensed or otherwise affected by this document.&#xA; b. Affirmer offers the Work as-is and makes no representations or&#xA;    warranties of any kind concerning the Work, express, implied,&#xA;    statutory or otherwise, including without limitation warranties of&#xA;    title, merchantability, fitness for a particular purpose, non&#xA;    infringement, or the absence of latent or other defects, accuracy, or&#xA;    the present or absence of errors, whether or not discoverable, all to&#xA;    the greatest extent permissible under applicable law.&#xA; c. Affirmer disclaims responsibility for clearing rights of other persons&#xA;    that may apply to the Work or any use thereof, including without&#xA;    limitation any person&amp;#39;s Copyright and Related Rights in the Work.&#xA;    Further, Affirmer disclaims responsibility for obtaining any necessary&#xA;    consents, permissions or other rights required for any use of the&#xA;    Work.&#xA; d. Affirmer understands and acknowledges that Creative Commons is not a&#xA;    party to this document and has no duty or obligation with respect to&#xA;    this CC0 or use of the Work.&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
