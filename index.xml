<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>posts</title>
    <link>https://ericchiang.github.io/</link>
    <description>Recent content on posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ericchiang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>User Namespaces</title>
      <link>https://ericchiang.github.io/post/user-namespaces/</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ericchiang.github.io/post/user-namespaces/</guid>
      <description>Ian Coldwater recently had a great thread on bridging the gap between the security and container worlds. A lot of those answers wont fit in a tweet, so hereâ€™s my attempt for a more in-depth response.
Namespaces for everyone User namespaces are a way to create unique views of user and group IDs. Unlike other namespaces, they can be created by non-root users and are primarily used by unprivileged processes to access capabilities normally reserved for root.</description>
    </item>
    
    <item>
      <title>Containers from Scratch</title>
      <link>https://ericchiang.github.io/post/containers-from-scratch/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ericchiang.github.io/post/containers-from-scratch/</guid>
      <description>This is write up for talk I gave at CAT BarCamp, an awesome unconference at Portland State University. The talk started with the self-imposed challenge &amp;ldquo;give an intro to containers without Docker or rkt.&amp;rdquo;
Often thought of as cheap VMs, containers are just isolated groups of processes running on a single host. That isolation leverages several underlying technologies built into the Linux kernel: namespaces, cgroups, chroots and lots of terms you&amp;rsquo;ve probably heard before.</description>
    </item>
    
    <item>
      <title>A Let&#39;s Encrypt Client for Go</title>
      <link>https://ericchiang.github.io/post/go-letsencrypt/</link>
      <pubDate>Fri, 13 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ericchiang.github.io/post/go-letsencrypt/</guid>
      <description>Just want to jump into the GitHub project? Click here.
If you haven&amp;rsquo;t heard, Let&amp;rsquo;s Encrypt is trying to secure the internet with automated and free TLS certificates.
In preperation for the Public Beta in December, I&amp;rsquo;ve written a simple client in Go which you can go get on GitHub. This post uses that client to take you through the workflow of signing up, completing challenges, and requesting certificates. Let&amp;rsquo;s Encrypt!</description>
    </item>
    
    <item>
      <title>Testing Databases with Docker</title>
      <link>https://ericchiang.github.io/post/testing-dbs-with-docker/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ericchiang.github.io/post/testing-dbs-with-docker/</guid>
      <description>Databases, authentication management, metric aggregators; there&amp;rsquo;s a service or API for everything.
There&amp;rsquo;s also a place called dependency hell.
Dependency hell. Where it&amp;rsquo;s impossible to run a test on your laptop. Where bugs are found by running a main, clicking around, and seeing what breaks. Where you cross your fingers and pray that new versions don&amp;rsquo;t break everything. Where we use mocks and stubs to combat a growing technology stack.</description>
    </item>
    
    <item>
      <title>TLS with Go</title>
      <link>https://ericchiang.github.io/post/go-tls/</link>
      <pubDate>Sun, 21 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ericchiang.github.io/post/go-tls/</guid>
      <description>For a long time my knowledge of TLS was Googling &amp;ldquo;how to configure nginx as an HTTPS proxy.&amp;rdquo; Okay, the cert goes here and the key goes here, that&amp;rsquo;s my job done. But with more and more pushes for things HTTPS and HTTP/2 (which defaults to using TLS), it sometimes helps to understand this a little better.
Unfortunately a lot of the articles on this topic are either too high level or too specific and, when I need to learn the topic, I ended up just reading the Go documentation.</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://ericchiang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ericchiang.github.io/about/</guid>
      <description>Eric Chiang
github: @ericchiang
twitter: @erchiang
email: eric.chiang.m@gmail.com
Security engineer.
Open source:
 dex: An OpenID Connect server which federates to other IdPs (LDAP, SAML, etc.) go-oidc: OpenID Connect support for golang.org/x/oauth2. pup: Like jq, but for HTML. k8s: A Kubernetes client with two external dependencies.  Posts on other sites:
 Using RBAC, Generally Available in Kubernetes v1.8 - October 27, 2017  Talks:
 PKI for Gophers - (video, 36 min) (slides) - GopherCon - July, 2019 Containers from Scratch - (video, 36 min) - CoreOS Fest - May, 2017 Writing Kubernetes Controllers (using Go!</description>
    </item>
    
  </channel>
</rss>